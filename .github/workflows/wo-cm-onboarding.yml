name: wo-cm-onboarding

on:
  push:
    branches:
      - main
    paths: 
      - '.pg/**/workload-orchestration/**'
      - '.pg/apps/common/**'
  workflow_run:
      workflows: ["WO-SYNC-VERSIONS"]
      types:
        - completed

  workflow_dispatch:
    inputs:
      update_common:
        type: choice
        description: 'Choose what common resources to update'
        default: none
        options:
        - none
        - schema-only
        - config-only
        - all
        required: true
      action:
        type: choice
        description: Choose app resources to update
        default: none
        options:
        - none
        - create-schema
        - create-soln-template
        - all
        required: true
      apps:
        type: string
        description: 'Comma-separated list of apps to update (e.g., testapp1,testapp2)'
        default: null
      usesiterg:
        type: string
        description: 'RG OVERRIDE - Leave empty to use default from wo-common.yaml'
        default: ""

permissions:
  id-token: write # 
  contents: write # for actions/checkout

jobs:
  update-context:
    runs-on: ubuntu-latest
    
    steps:
      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - uses: actions/checkout@v4

      - name: Source composite actions
        uses: ./.github/actions/wo-utilities/
        with:
          utilities: "yq"

      - name: Install Workload Orchestration Extension
        uses: ./.github/actions/wo-install-wo-extension

      - name: Update Context
        uses: ./.github/actions/wo-update-context

  detect-apps-resources-to-update:
    needs: update-context
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ github.event_name == 'workflow_dispatch' && steps.app-list-dispatch.outputs.apps || steps.app-list.outputs.apps }}
    steps:
      - name: Git Info
        id: check-author
        run: |
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"

      - uses: actions/checkout@v4
      - name: Check changed files
        if: github.event_name == 'push' || github.event_name == 'workflow_run'
        id: changed-files
        uses: ./.github/actions/wo-changed-files
        with:
          files: .pg/**/*
      - name: Extract apps with changes
        if: github.event_name == 'push' || github.event_name == 'workflow_run'
        id: app-list
        run: |
          # Get all changed files and extract unique app names
          APPS=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | 
                 grep -o '\.pg/apps/[^/]*/' | 
                 sed 's/\.pg\/apps\///' | 
                 sed 's/\///' | 
                 grep -v '^common$' | 
                 sort -u | 
                 jq -R -s -c 'split("\n")[:-1]')
          echo "apps=$APPS" >> $GITHUB_OUTPUT

      - name: Extract and validate apps for update
        if: github.event_name == 'workflow_dispatch'
        id: app-list-dispatch
        run: |
          echo "Validating apps from input list for update..."
          APPS_INPUT="${{ github.event.inputs.apps }}"
          
          # Handle empty or whitespace-only input
          if [[ -z "${APPS_INPUT// }" ]]; then
            echo "⚠️ Empty app list provided"
            echo "apps=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          VALID_APPS=()

          # Process each app
          IFS=',' read -ra APP_LIST <<< "$APPS_INPUT"
          for app in "${APP_LIST[@]}"; do
            # Trim whitespace
            app=$(echo "$app" | xargs)
            
            # Validate app directory exists
            if [[ -d ".pg/apps/$app" ]]; then
              VALID_APPS+=("$app")
              echo "✅ Validated app: $app"
            else
              echo "❌ Warning: Directory .pg/apps/$app does not exist, skipping"
            fi
          done

          # Convert validated apps to JSON array, filtering out any empty strings
          APPS=$(printf '%s\n' "${VALID_APPS[@]}" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "apps=$APPS" >> $GITHUB_OUTPUT
          echo "✅ Final app list: $APPS"

  update-wo-artifacts:
    needs: detect-apps-resources-to-update
    if: ${{ needs.detect-apps-resources-to-update.outputs.apps != '[]' && (github.event_name != 'workflow_dispatch' || github.event.inputs.action != 'none') }}
    runs-on: ubuntu-latest
    outputs:
      files_created: ${{ steps.check-created.outputs.files_created }}
    strategy:
      fail-fast: false
      max-parallel: 4  # Limit to 4 concurrent jobs
      matrix:
        app_name: ${{ fromJson(needs.detect-apps-resources-to-update.outputs.apps) }}
    
    steps:
      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Source composite actions
        uses: ./.github/actions/wo-utilities/
        with:
          utilities: "yq"

      - name: Read Azure config from wo-common.yaml
        run: |
          # Read default values from wo-common.yaml
          DEFAULT_RG=$(yq eval '.common.rg' .pg/sites/common/wo-common.yaml)
          DEFAULT_LOC=$(yq eval '.common.location' .pg/sites/common/wo-common.yaml)
          
          # Check if usesiterg override is provided
          if [[ "${{ github.event.inputs.usesiterg }}" != "" ]]; then
            # Use the override value
            AZURE_RG="${{ github.event.inputs.usesiterg }}"
            echo "Using override resource group: $AZURE_RG"
          else
            # Use the default from config
            AZURE_RG="$DEFAULT_RG"
            echo "Using default resource group from wo-common.yaml: $AZURE_RG"
          fi
          
          # Location always comes from config (no override for location)
          AZURE_LOC="$DEFAULT_LOC"
          
          echo "AZURE_RESOURCE_GROUP=$AZURE_RG" >> $GITHUB_ENV
          echo "AZURE_LOCATION=$AZURE_LOC" >> $GITHUB_ENV
          echo "Final Azure config - RG: $AZURE_RG, Location: $AZURE_LOC"

      - name: Verify composite actions
        run: |
          pwd
          yq --version
      
      - name: Install Workload Orchestration Extension
        uses: ./.github/actions/wo-install-wo-extension

      - name: Check changed files
        if: github.event_name == 'push' || github.event_name == 'workflow_run'
        id: changed-files
        uses: ./.github/actions/wo-changed-files
        with:
          files: .pg/**/*
          
      - name: Get files
        id: get-files
        run: |
          BASE_PATH=".pg/apps/${{ matrix.app_name }}/workload-orchestration"
          
          # Find schema file
          SCHEMA_FILE=$(find "$BASE_PATH" -name "*-schema.yaml" -type f)
          if [[ -f "$SCHEMA_FILE" ]]; then
            echo "schema_file=$SCHEMA_FILE" >> $GITHUB_OUTPUT
          else
            echo "::warning::Schema file not found in $BASE_PATH"
          fi
          
          # Find solution template file
          SOL_TEMP_FILE=$(find "$BASE_PATH" -name "*-sol-template.yaml" -type f)
          if [[ -f "$SOL_TEMP_FILE" ]]; then
            echo "sol_temp_file=$SOL_TEMP_FILE" >> $GITHUB_OUTPUT
          else
            echo "::warning::Solution template file not found in $BASE_PATH"
          fi
          
          # Find specs file in same directory as solution template
          SPECS_FILE=$(find "$BASE_PATH" -name "*-specs.json" -type f)
          if [[ -f "$SPECS_FILE" ]]; then
            echo "specs_file=$SPECS_FILE" >> $GITHUB_OUTPUT
          else
            echo "::warning::Specs file not found in $BASE_PATH"
          fi
          
          # Find metadata file
          METADATA_FILE=$(find "$BASE_PATH" -name "metadata.yaml" -type f)
          if [[ -f "$METADATA_FILE" ]]; then
            echo "metadata_file=$METADATA_FILE" >> $GITHUB_OUTPUT
          else
            echo "::warning::Metadata file not found in $BASE_PATH"
          fi

      - name: Set update flags
        id: update-flags
        run: |
          # Initialize flags
          CREATE_SCHEMA="false"
          CREATE_TEMPLATE="false"

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual runs, use the action input
            case "${{ github.event.inputs.action }}" in
              "create-schema")
                CREATE_SCHEMA="true"
                ;;
              "create-soln-template")
                CREATE_TEMPLATE="true"
                ;;
              "all")
                CREATE_SCHEMA="true"
                CREATE_TEMPLATE="true"
                ;;
            esac
          else
            # For push events, check changed files
            if [[ $(echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -c "${{ steps.get-files.outputs.schema_file }}") -gt 0 ]]; then
              CREATE_SCHEMA="true"
            fi
            if [[ $(echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -E "${{ steps.get-files.outputs.sol_temp_file }}|${{ steps.get-files.outputs.specs_file }}|${{ steps.get-files.outputs.metadata_file }}") ]]; then
              CREATE_TEMPLATE="true"
            fi
          fi

          # Set outputs
          echo "create_schema=$CREATE_SCHEMA" >> $GITHUB_OUTPUT
          echo "create_template=$CREATE_TEMPLATE" >> $GITHUB_OUTPUT

          # Echo final status using local variables
          echo "Set flags: schema=$CREATE_SCHEMA, template=$CREATE_TEMPLATE"

      - name: Create App Schema
        if: steps.update-flags.outputs.create_schema == 'true'
        uses: ./.github/actions/wo-create-schema
        with:
          app-name: ${{ matrix.app_name }}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          location: ${{ env.AZURE_LOCATION }}
          schema-file: ${{ steps.get-files.outputs.schema_file }}

      - name: Create App Solution Template
        id: create-template
        if: steps.update-flags.outputs.create_template == 'true'
        uses: ./.github/actions/wo-create-solution-template
        with:
          app-name: ${{ matrix.app_name }}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          location: ${{ env.AZURE_LOCATION }}
          template-file: ${{ steps.get-files.outputs.sol_temp_file }}
          specification-file: ${{ steps.get-files.outputs.specs_file }}
          metadata-file: ${{ steps.get-files.outputs.metadata_file }}

      - name: Check if files were created
        id: check-created
        run: |
          # Check if any files were created (either schema or template)
          if [[ "${{ steps.create-template.outputs.files_created }}" == "true" ]] || [[ "${{ steps.update-flags.outputs.create_schema }}" == "true" ]]; then
            echo "files_created=true" >> $GITHUB_OUTPUT
          else
            echo "files_created=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload generated files
        if: steps.check-created.outputs.files_created == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: generated-artifacts-${{ matrix.app_name }}
          path: .pg/apps/${{ matrix.app_name }}/solutions/
          retention-days: 1
          if-no-files-found: warn

  update_common_artifacts:
    needs: update-context
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.update_common != 'none' }}
    runs-on: ubuntu-latest
    outputs:
      files_created: ${{ steps.check-created.outputs.files_created }}
    steps:
      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - uses: actions/checkout@v4

      - name: Source composite actions
        uses: ./.github/actions/wo-utilities/
        with:
          utilities: "yq"

      - name: Read Azure config from wo-common.yaml
        run: |
          # Read default values from wo-common.yaml
          DEFAULT_RG=$(yq eval '.common.rg' .pg/sites/common/wo-common.yaml)
          DEFAULT_LOC=$(yq eval '.common.location' .pg/sites/common/wo-common.yaml)
          
          # Check if usesiterg override is provided
          if [[ "${{ github.event.inputs.usesiterg }}" != "" ]]; then
            # Use the override value
            AZURE_RG="${{ github.event.inputs.usesiterg }}"
            echo "Using override resource group: $AZURE_RG"
          else
            # Use the default from config
            AZURE_RG="$DEFAULT_RG"
            echo "Using default resource group from wo-common.yaml: $AZURE_RG"
          fi
          
          # Location always comes from config (no override for location)
          AZURE_LOC="$DEFAULT_LOC"
          
          echo "AZURE_RESOURCE_GROUP=$AZURE_RG" >> $GITHUB_ENV
          echo "AZURE_LOCATION=$AZURE_LOC" >> $GITHUB_ENV
          echo "Final Azure config - RG: $AZURE_RG, Location: $AZURE_LOC"

      - name: Install Workload Orchestration Extension
        uses: ./.github/actions/wo-install-wo-extension

      - name: Get files
        id: get-files
        run: |
          # Verify schema file exists
          SCHEMA_PATH=".pg/apps/common/common-schema.yaml"
          if [[ -f "$SCHEMA_PATH" ]]; then
            echo "schema_file=$SCHEMA_PATH" >> $GITHUB_OUTPUT
          else
            echo "::warning::Common schema file not found at $SCHEMA_PATH"
          fi
          
          # Verify config template file exists
          CONFIG_PATH=".pg/apps/common/common-config-template.yaml"
          if [[ -f "$CONFIG_PATH" ]]; then
            echo "config_file=$CONFIG_PATH" >> $GITHUB_OUTPUT
          else
            echo "::warning::Common config template file not found at $CONFIG_PATH"
          fi
        
      - name: Check changed files
        if: github.event_name == 'push' || github.event_name == 'workflow_run'
        id: changed-files
        uses: ./.github/actions/wo-changed-files
        with:
          files: .pg/apps/common/*

      - name: Set update flags
        id: update-flags
        run: |
          # Initialize flags
          UPDATE_COMMON_SCHEMA="false"
          UPDATE_COMMON_CONFIG="false"

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual runs, check update_common input
            case "${{ github.event.inputs.update_common }}" in
              "schema-only"|"all")
                UPDATE_COMMON_SCHEMA="true"
                ;;
            esac
            case "${{ github.event.inputs.update_common }}" in
              "config-only"|"all")
                UPDATE_COMMON_CONFIG="true"
                ;;
            esac
          else
            # For push events, check changed files
            if [[ $(echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -c ".pg/apps/common/common-schema.yaml") -gt 0 ]]; then
              UPDATE_COMMON_SCHEMA="true"
            fi
            if [[ $(echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -c ".pg/apps/common/common-config-template.yaml") -gt 0 ]]; then
              UPDATE_COMMON_CONFIG="true"
            fi
          fi

          # Set outputs
          echo "update_schema=$UPDATE_COMMON_SCHEMA" >> $GITHUB_OUTPUT
          echo "update_config=$UPDATE_COMMON_CONFIG" >> $GITHUB_OUTPUT

          # Echo final status using local variables
          echo "Set flags: schema=$UPDATE_COMMON_SCHEMA, template=$UPDATE_COMMON_CONFIG"

      - name: Create Common Schema
        if: steps.update-flags.outputs.update_schema == 'true'
        uses: ./.github/actions/wo-create-schema
        with:
          app-name: common
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          location: ${{ env.AZURE_LOCATION }}
          schema-file: ${{ steps.get-files.outputs.schema_file }}

      - name: Create Common Config Template
        id: create-config
        if: steps.update-flags.outputs.update_config == 'true'
        uses: ./.github/actions/wo-create-config-template
        with:
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          config-template-file: ${{ steps.get-files.outputs.config_file }}
          description: "Common configuration template for shared settings"
          location: ${{ env.AZURE_LOCATION }}

      - name: Check if files were created
        id: check-created
        run: |
          # Check if any files were created (either schema or config)
          if [[ "${{ steps.create-config.outputs.files_created }}" == "true" ]] || [[ "${{ steps.update-flags.outputs.update_schema }}" == "true" ]]; then
            echo "files_created=true" >> $GITHUB_OUTPUT
          else
            echo "files_created=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload generated files
        if: steps.check-created.outputs.files_created == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: generated-artifacts-common
          path: .pg/apps/common/solutions/
          retention-days: 1
          if-no-files-found: warn

  commit-generated-files:
    needs: [update-wo-artifacts, update_common_artifacts]
    if: always() && (needs.update-wo-artifacts.outputs.files_created == 'true' || needs.update_common_artifacts.outputs.files_created == 'true')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: generated-artifacts-*
          path: downloaded-artifacts

      - name: Process and copy artifacts to correct locations
        run: |
          echo "Processing downloaded artifacts..."
          
          # Create solutions directories if they don't exist
          mkdir -p .pg/apps/common/solutions
          
          # Process each artifact
          for artifact_dir in downloaded-artifacts/generated-artifacts-*; do
            if [ -d "$artifact_dir" ]; then
              artifact_name=$(basename "$artifact_dir")
              echo "Processing $artifact_name"
              
              if [[ "$artifact_name" == "generated-artifacts-common" ]]; then
                # Copy common solutions
                if [ -d "$artifact_dir" ]; then
                  cp -r "$artifact_dir"/* .pg/apps/common/solutions/ 2>/dev/null || echo "No files to copy for common"
                fi
              else
                # Extract app name from artifact name
                app_name=${artifact_name#generated-artifacts-}
                echo "Processing app: $app_name"
                
                # Create app solutions directory
                mkdir -p ".pg/apps/$app_name/solutions"
                
                # Copy app solutions
                if [ -d "$artifact_dir" ]; then
                  cp -r "$artifact_dir"/* ".pg/apps/$app_name/solutions/" 2>/dev/null || echo "No files to copy for $app_name"
                fi
              fi
            fi
          done
          
          # List what was copied for debugging
          echo "Files copied:"
          find .pg -name "*.json" -o -name "*.yaml" | head -20

      - name: Commit all generated files
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Generated workload orchestration artifacts"
          file_pattern: ".pg/**"
